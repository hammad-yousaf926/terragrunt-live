name: Digger Workflow

on:
  workflow_dispatch:
    inputs:
      spec:
        description: "Digger spec file"
        required: true
      run_name:
        description: "Optional run name"
        required: false

run-name: '${{ inputs.run_name }}'

jobs:
  digger-job:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required to merge PRs
      id-token: write      # Required for OIDC authentication
      pull-requests: write # Required to post PR comments
      issues: read         # Required to check if PR number is an issue or not
      statuses: write      # Required to validate combined PR status

    steps:
      - uses: actions/checkout@v4

      - name: Extract Project Directory
        id: extract-project-dir
        run: |
          PROJECT_DIR=$(echo '${{ github.event.inputs.spec }}' | grep -oP '(?<="projectDir":")[^"]+')
          if [ -z "$PROJECT_DIR" ]; then
            echo "Error: Unable to determine project directory"
            exit 1
          fi
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_ENV

      - name: Extract Root Directory
        id: extract-root-dir
        run: |
          ROOT_DIR=$(echo '${{ env.project_dir }}' | awk -F'/' '{print $1"/"$2}')
          if [ -z "$ROOT_DIR" ]; then
            echo "Error: Unable to determine root directory"
            exit 1
          fi
          echo "root_dir=${ROOT_DIR}" >> $GITHUB_ENV


      - name: Parse Account ID from account.hcl
        id: parse-account
        run: |
          ACCOUNT_ID=$(grep -oP '(?<=account_id = ")[^"]+' ${{ env.root_dir }}/account.hcl)
          if [ -z "$ACCOUNT_ID" ]; then
            echo "Error: Unable to extract account ID"
            exit 1
          fi
          echo "account_id=${ACCOUNT_ID}" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8
      - name: Install Terragrunt
        run: |
          curl -L -o terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.44.1/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Run Terraform Plan
        run: |
          cd /home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}
          terragrunt plan -out=/home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}/hammad-yousaf926-terragrunt-live-6-${{ env.project_dir }}.tfplan

      - name: Debug Terraform Plan File
        run: |
          echo "Listing generated plan file:"
          ls -lh /home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}
          echo "Plan file content (if text):"
          cat /home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}/hammad-yousaf926-terragrunt-live-6-${{ env.project_dir }}.tfplan || true

      - name: Parse Terraform Plan
        run: |
          if [ -f /home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}/hammad-yousaf926-terragrunt-live-6-${{ env.project_dir }}.tfplan ]; then
            terragrunt show -no-color -json /home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}/hammad-yousaf926-terragrunt-live-6-${{ env.project_dir }}.tfplan > /home/runner/work/terragrunt-live/terragrunt-live/${{ env.project_dir }}/plan.json
            echo "Plan JSON successfully generated."
          else
            echo "Error: Plan file not found or invalid."
            exit 1
          fi

      - name: Digger Run
        uses: diggerhq/digger@vLatest
        with:
          digger-spec: ${{ inputs.spec }}
          setup-aws: true
          aws-role-to-assume: arn:aws:iam::${{ env.account_id }}:role/digger
          aws-region: us-east-1
          setup-terragrunt: true
          terragrunt-version: 0.44.1
          # upload-plan-destination: 'aws'
          # upload-plan-destination-s3-bucket: 'my-terraform-state-ntdocsss'
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

